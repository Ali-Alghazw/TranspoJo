@{
    ViewBag.Title = "Transpo Jo - Private Transportation";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70&libraries=places&callback=initMap" async defer></script>
    <link href="~/css/privatecss.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <h1 class="text-center my-5">🚗 Transpo Jo - Private Taxi Route</h1>

        <div class="row mb-4">
            <div class="col-md-6 offset-md-3">
                <input type="text" id="destination" class="form-control form-control-lg" placeholder="Where do you want to go?" />
                <button class="btn btn-danger w-100 custom-btn mt-3" onclick="getPrivateRoute()">🚗 Show Private Car Route</button>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-10 offset-lg-1">
                <div class="info-box">
                    <div class="trip-header">🧭 Trip Details</div>
                    <div id="steps-info"></div>
                    <hr />
                    <p class="mb-1"><strong>Total Distance:</strong> <span class="highlight-distance" id="eta">0 km</span></p>
                    <p><strong>Estimated Cost:</strong> <span class="highlight-cost" id="total-cost">0</span> JD</p>
                </div>
            </div>
        </div>

        <div id="map" class="mt-5"></div>
    </div>

    <script>
        let map, currentLocation, destinationLocation, currentMarker, destinationMarker;
        let directionsService;
        let polylines = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 31.9784, lng: 35.9042 },
                zoom: 13
            });

            directionsService = new google.maps.DirectionsService();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(pos => {
                    currentLocation = {
                        latitude: pos.coords.latitude,
                        longitude: pos.coords.longitude
                    };
                    currentMarker = new google.maps.Marker({
                        position: { lat: currentLocation.latitude, lng: currentLocation.longitude },
                        map,
                        icon: "https://maps.google.com/mapfiles/kml/shapes/man.png",
                        title: "You are here"
                    });
                    map.setCenter(currentMarker.getPosition());
                });
            }

            const input = document.getElementById("destination");
            const autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                if (place.geometry) {
                    const loc = place.geometry.location;
                    destinationLocation = { latitude: loc.lat(), longitude: loc.lng() };

                    if (destinationMarker) destinationMarker.setMap(null);
                    destinationMarker = new google.maps.Marker({
                        position: loc,
                        map,
                        icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
                        title: "Destination"
                    });

                    map.setCenter(loc);
                }
            });
        }

        async function getPrivateRoute() {
            if (!currentLocation || !destinationLocation) {
                alert("Please select both your location and destination.");
                return;
            }

            clearMap();

            try {
                const response = await fetch("http://localhost:5139/api/private_route/private-route", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        currentLocation,
                        destination: destinationLocation
                    })
                });

                const data = await response.json();
                console.log("Private route data:", data);

                if (!data || !data.distanceKm) {
                    document.getElementById("steps-info").innerHTML =
                        `<div class="step-info text-danger">❌ Could not calculate private route.</div>`;
                    return;
                }

                drawRoute(currentLocation, destinationLocation, "#43A047");
                addMarker(currentLocation, "blue-dot.png", "You are here");
                addMarker(destinationLocation, "red-dot.png", "Destination");

                const startRegion = await getRegionName(currentLocation.latitude, currentLocation.longitude);
                const endRegion = await getRegionName(destinationLocation.latitude, destinationLocation.longitude);

                document.getElementById("steps-info").innerHTML =
                    `<div class="step-info">${data.tripSummaryText}</div>`;

                document.getElementById("eta").innerText = `${data.distanceKm} km`;
                document.getElementById("total-cost").innerText = `${data.estimatedCost} JD`;

            } catch (err) {
                console.error("Error fetching private route:", err);
                alert("An error occurred while calculating private route.");
            }
        }

        function drawRoute(start, end, color) {
            directionsService.route({
                origin: { lat: start.latitude, lng: start.longitude },
                destination: { lat: end.latitude, lng: end.longitude },
                travelMode: google.maps.TravelMode.DRIVING
            }, (result, status) => {
                if (status === "OK") {
                    const path = result.routes[0].overview_path;
                    const polyline = new google.maps.Polyline({
                        path,
                        strokeColor: color,
                        strokeOpacity: 1.0,
                        strokeWeight: 4,
                        map
                    });
                    polylines.push(polyline);
                }
            });
        }

        function addMarker(coord, iconColor, title) {
            new google.maps.Marker({
                position: { lat: coord.latitude, lng: coord.longitude },
                map,
                icon: `https://maps.google.com/mapfiles/ms/icons/${iconColor}`,
                title
            });
        }

        function clearMap() {
            polylines.forEach(p => p.setMap(null));
            polylines = [];
            document.getElementById("steps-info").innerHTML = "";
            document.getElementById("eta").innerText = "0 km";
            document.getElementById("total-cost").innerText = "0";
        }

        async function getRegionName(lat, lng) {
            const key = "AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70";
            const res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${key}`);
            const data = await res.json();
            const region = data.results.find(r => r.types.includes("sublocality") || r.types.includes("locality"));
            return region ? region.formatted_address.split(',')[0] : "Unknown";
        }
    </script>
</body>
</html>
