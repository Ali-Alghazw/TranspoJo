@{
    ViewBag.Title = "Transpo Jo - Nearby Rental Cars";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70&callback=initMap" async defer></script>
    <link href="~/css/rentalcss.css" rel="stylesheet" />
    <style>
        #map {
            height: 500px;
            width: 100%;
            border-radius: 8px;
        }

        .rental-entry {
            margin-bottom: 10px;
        }

        .highlight {
            font-weight: 600;
            color: #007bff;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center my-5">🚗 Nearby Rental Car Places</h1>
        <div class="row">
            <div class="col-lg-6">
                <div id="map"></div>
            </div>
            <div class="col-lg-6">
                <div class="info-box">
                    <h4>Rental Places Near You:</h4>
                    <div id="rental-list">Click the button to load nearby rental places.</div>
                    <button id="toggle-btn" class="btn btn-primary mt-3 w-100" onclick="toggleLoadReset()">🔍 Load Nearby Rentals</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let map;
        let currentMarker;
        let rentalMarkers = [];
        let isLoaded = false;  // Tracks if rentals are currently loaded

        async function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 31.9784, lng: 35.9042 },
                zoom: 13
            });

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((pos) => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;

                    const userLatLng = { lat, lng: lon };
                    map.setCenter(userLatLng);

                    currentMarker = new google.maps.Marker({
                        position: userLatLng,
                        map,
                        title: "You are here",
                        icon: "https://maps.google.com/mapfiles/kml/shapes/man.png"
                    });
                }, () => {
                    alert("Could not get your location.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        async function loadNearbyRentalPlaces() {
            if (!currentMarker) {
                alert("Unable to get your location. Please try again.");
                return false;
            }

            const lat = currentMarker.getPosition().lat();
            const lon = currentMarker.getPosition().lng();

            try {
                const response = await fetch(`http://localhost:5139/api/rental/nearby-rental-places?currentLat=${lat}&currentLon=${lon}`);
                if (!response.ok) throw new Error("Failed to load rentals");

                const rentals = await response.json();
                const listContainer = document.getElementById("rental-list");
                listContainer.innerHTML = "";

                if (rentals.length === 0) {
                    listContainer.innerHTML = "<p>No rental places found nearby.</p>";
                    return true;
                }

                // Clear any existing rental markers first
                rentalMarkers.forEach(marker => marker.setMap(null));
                rentalMarkers = [];

                rentals.forEach(r => {
                    const { name, address, rating, coordinates } = r;

                    const div = document.createElement("div");
                    div.className = "rental-entry";
                    div.innerHTML = `
                        <p><span class="highlight">${name}</span><br/>
                        ${address}<br/>
                        ⭐ ${rating.toFixed(1)} / 5</p><hr/>`;

                    listContainer.appendChild(div);

                    const marker = new google.maps.Marker({
                        position: { lat: coordinates.latitude, lng: coordinates.longitude },
                        map,
                        title: name,
                        icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
                    });

                    rentalMarkers.push(marker);
                });

                return true;
            } catch (err) {
                console.error("Error loading rentals:", err);
                document.getElementById("rental-list").innerHTML = "<p class='text-danger'>Failed to load rental places.</p>";
                return false;
            }
        }

        function resetRentalView() {
            // Remove all rental markers from map
            rentalMarkers.forEach(marker => marker.setMap(null));
            rentalMarkers = [];

            // Clear rental list content
            document.getElementById("rental-list").innerHTML = "Click the button to load nearby rental places.";

            // Reset map center to current location if available
            if (currentMarker) {
                map.setCenter(currentMarker.getPosition());
                map.setZoom(13);
            }
        }

        async function toggleLoadReset() {
            const btn = document.getElementById("toggle-btn");
            if (!isLoaded) {
                const success = await loadNearbyRentalPlaces();
                if (success) {
                    btn.textContent = "🔄 Reset";
                    btn.classList.remove("btn-primary");
                    btn.classList.add("btn-secondary");
                    isLoaded = true;
                }
            } else {
                resetRentalView();
                btn.textContent = "🔍 Load Nearby Rentals";
                btn.classList.remove("btn-secondary");
                btn.classList.add("btn-primary");
                isLoaded = false;
            }
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
