@* @{
    ViewBag.Title = "Transpo Jo - Public Transportation Routing";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70&libraries=places,geometry&callback=initMap" async defer></script>
    <style>
        #map {
            height: 500px;
            width: 100%;
            border-radius: 15px;
            margin-top: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }

        .info-box {
            background: white;
            padding: 25px;
            border-radius: 15px;
            margin-top: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .step-info {
            margin-bottom: 18px;
            font-size: 1.1rem;
        }

        .highlight-cost {
            color: #dc3545;
            font-weight: bold;
        }

        .highlight-distance {
            color: #0d6efd;
        }

        .custom-btn {
            font-size: 1.1rem;
            padding: 12px;
            border-radius: 12px;
        }

        .trip-header {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center my-5">🚍 Transpo Jo - Public Transport Navigator</h1>

        <div class="row mb-4">
            <div class="col-md-6 offset-md-3">
                <input type="text" id="destination" class="form-control form-control-lg" placeholder="Where do you want to go?" />
                <button class="btn btn-primary w-100 custom-btn mt-3" onclick="getRoute()">🔍 Find Best Route</button>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-10 offset-lg-1">
                <div class="info-box">
                    <div class="trip-header">🧭 Trip Details</div>
                    <div id="steps-info"></div>
                    <hr />
                    <p class="mb-1"><strong>Total Distance:</strong> <span class="highlight-distance" id="eta">0 km</span></p>
                    <p><strong>Total Cost:</strong> <span class="highlight-cost" id="total-cost">0</span> JD</p>
                </div>
            </div>
        </div>

        <div id="map" class="mt-5"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let map, currentLocation, destinationLocation, currentMarker, destinationMarker;
        let directionsService;
        let polylines = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 31.9784, lng: 35.9042 },
                zoom: 13
            });

            directionsService = new google.maps.DirectionsService();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(pos => {
                    currentLocation = {
                        latitude: pos.coords.latitude,
                        longitude: pos.coords.longitude
                    };
                    currentMarker = new google.maps.Marker({
                        position: { lat: currentLocation.latitude, lng: currentLocation.longitude },
                        map,
                        icon: "https://maps.google.com/mapfiles/kml/shapes/man.png",
                        title: "You are here"
                    });
                    map.setCenter(currentMarker.getPosition());
                });
            }

            const input = document.getElementById("destination");
            const autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                if (place.geometry) {
                    const loc = place.geometry.location;
                    destinationLocation = { latitude: loc.lat(), longitude: loc.lng() };

                    if (destinationMarker) destinationMarker.setMap(null);
                    destinationMarker = new google.maps.Marker({
                        position: loc,
                        map,
                        icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
                        title: "Destination"
                    });

                    map.setCenter(loc);
                }
            });
        }

        async function getRoute() {
            if (!currentLocation || !destinationLocation) {
                alert("Please select both your location and destination.");
                return;
            }

            clearMap();

            try {
                const response = await fetch("http://localhost:5139/api/route/find-best", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        currentLocation,
                        destination: destinationLocation
                    })
                });

                const data = await response.json();
                console.log(data);

                if (!data || !data.routePolyline) {
                    document.getElementById("steps-info").innerHTML =
                        `<div class="step-info text-danger">❌ No route found. Try a nearby destination.</div>`;
                    return;
                }

                let totalDistance = 0;
                let totalCost = data.routePolyline.length - 1;

                const startDist = data.walkToStartDistanceKm;
                const endDist = data.walkToEndDistanceKm;

                const startRegion = await getRegionName(currentLocation.latitude, currentLocation.longitude);
                const endRegion = await getRegionName(destinationLocation.latitude, destinationLocation.longitude);

                // A ➜ B
                const startSuggest = startDist > 0.5
                    ? `🚕 Take a taxi from <strong>${startRegion}</strong> to <strong>${data.startStation.name}</strong> (${startDist.toFixed(2)} km)`
                    : `🚶 Walk from <strong>${startRegion}</strong> to <strong>${data.startStation.name}</strong> (${startDist.toFixed(2)} km)`;

                drawRoute(currentLocation, data.startStation.coordinates, "#4285F4");
                addMarker(data.startStation.coordinates, "blue-dot.png", data.startStation.name);
                document.getElementById("steps-info").innerHTML += `<div class="step-info">${startSuggest}</div>`;
                totalDistance += startDist;

                // B ➜ C Bus
                drawBusPolyline(data.routePolyline);
                addMarker(data.endStation.coordinates, "orange-dot.png", data.endStation.name);
                document.getElementById("steps-info").innerHTML +=
                    `<div class="step-info">🚌 Bus from <strong>${data.startStation.name}</strong> ➜ <strong>${data.endStation.name}</strong> (${totalCost} stations) - <span class="highlight-cost">${totalCost} JD</span></div>`;

                // C ➜ D
                const endSuggest = endDist > 0.5
                    ? `🚕 Take a taxi from <strong>${data.endStation.name}</strong> to <strong>${endRegion}</strong> (${endDist.toFixed(2)} km)`
                    : `🚶 Walk from <strong>${data.endStation.name}</strong> to <strong>${endRegion}</strong> (${endDist.toFixed(2)} km)`;

                drawRoute(data.endStation.coordinates, destinationLocation, "#F9A825");
                document.getElementById("steps-info").innerHTML += `<div class="step-info">${endSuggest}</div>`;
                totalDistance += endDist;

                document.getElementById("eta").innerText = `${totalDistance.toFixed(2)} km`;
                document.getElementById("total-cost").innerText = totalCost;

            } catch (error) {
                console.error("Error fetching route:", error);
                alert("An error occurred while getting the route.");
            }
        }

        function drawRoute(start, end, color) {
            directionsService.route({
                origin: { lat: start.latitude, lng: start.longitude },
                destination: { lat: end.latitude, lng: end.longitude },
                travelMode: google.maps.TravelMode.DRIVING
            }, (result, status) => {
                if (status === "OK") {
                    const path = result.routes[0].overview_path;
                    const polyline = new google.maps.Polyline({
                        path,
                        strokeColor: color,
                        strokeOpacity: 1.0,
                        strokeWeight: 4,
                        map
                    });
                    polylines.push(polyline);
                }
            });
        }

        function drawBusPolyline(points) {
            const path = points.map(p => ({ lat: p.latitude, lng: p.longitude }));
            const polyline = new google.maps.Polyline({
                path,
                strokeColor: "#8E24AA",
                strokeOpacity: 1.0,
                strokeWeight: 4,
                map
            });
            polylines.push(polyline);
        }

        function addMarker(coord, iconColor, title) {
            new google.maps.Marker({
                position: { lat: coord.latitude, lng: coord.longitude },
                map,
                icon: `https://maps.google.com/mapfiles/ms/icons/${iconColor}`,
                title
            });
        }

        function clearMap() {
            polylines.forEach(p => p.setMap(null));
            polylines = [];
            document.getElementById("steps-info").innerHTML = "";
            document.getElementById("eta").innerText = "0 km";
            document.getElementById("total-cost").innerText = "0";
        }

        async function getRegionName(lat, lng) {
            const key = "AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70";
            const res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${key}`);
            const data = await res.json();
            const region = data.results.find(r => r.types.includes("sublocality") || r.types.includes("locality"));
            return region ? region.formatted_address.split(',')[0] : "Unknown";
        }
    </script>
</body>
</html>
 *@

@{
    ViewBag.Title = "Transpo Jo - Public Bus Route";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbLyZgSVr4OCN-UPn_Aa5YOSi8OgZjZ70&libraries=places&callback=initMap" async defer></script>
    <link href="~/css/publiccss.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <h1 class="text-center my-5">🚌 Transpo Jo - Bus Route</h1>

        <div class="row mb-4">
            <div class="col-md-6 offset-md-3">
                <input type="text" id="destination" class="form-control form-control-lg" placeholder="Enter destination" />
                <button class="btn btn-primary w-100 custom-btn mt-3" onclick="getBusRoute()">🚌 Show Bus Route</button>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-10 offset-lg-1">
                <div class="info-box">
                    <div class="trip-header">🧭 Trip Summary</div>
                    <div id="steps-info"></div>
                    <hr />
                    <p class="mb-1"><strong>Total Distance:</strong> <span class="highlight-distance" id="total-distance">0 km</span></p>
                    <p><strong>Total Cost:</strong> <span class="highlight-cost" id="total-cost">0</span> JD</p>
                </div>
            </div>
        </div>

        <div id="map" class="mt-5"></div>
    </div>

    <script>
        let map, currentLocation, destinationLocation, currentMarker, destinationMarker;
        let directionsService;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 31.9784, lng: 35.9042 },
                zoom: 13
            });

            directionsService = new google.maps.DirectionsService();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(pos => {
                    currentLocation = {
                        latitude: pos.coords.latitude,
                        longitude: pos.coords.longitude
                    };
                    currentMarker = new google.maps.Marker({
                        position: { lat: currentLocation.latitude, lng: currentLocation.longitude },
                        map,
                        icon: "https://maps.google.com/mapfiles/kml/shapes/man.png",
                        title: "Your Location"
                    });
                    map.setCenter(currentMarker.getPosition());
                });
            }

            const input = document.getElementById("destination");
            const autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                if (place.geometry) {
                    const loc = place.geometry.location;
                    destinationLocation = { latitude: loc.lat(), longitude: loc.lng() };

                    if (destinationMarker) destinationMarker.setMap(null);
                    destinationMarker = new google.maps.Marker({
                        position: loc,
                        map,
                        icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
                        title: "Destination"
                    });

                    map.setCenter(loc);
                }
            });
        }

        async function getBusRoute() {
            if (!currentLocation || !destinationLocation) {
                alert("Please select both your location and destination.");
                return;
            }

            try {
                const response = await fetch("http://localhost:5139/api/route/find-best", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        currentLocation,
                        destination: destinationLocation
                    })
                });

                const data = await response.json();
                console.log("Bus route result:", data);

                if (!data || !data.tripSummaryText) {
                    document.getElementById("steps-info").innerHTML =
                        `<div class="step-info text-danger">❌ No bus route found.</div>`;
                    return;
                }

                drawPolyline(data.routePolyline, "#007bff");

                document.getElementById("steps-info").innerHTML =
                    `<div class="step-info">${data.tripSummaryText.replace(/\n/g, "<br/>")}</div>`;
                document.getElementById("total-distance").innerText = `${data.totalDistance} km`;
                document.getElementById("total-cost").innerText = `${data.totalCost} JD`;
            } catch (err) {
                console.error("Error fetching route:", err);
                alert("An error occurred while calculating the route.");
            }
        }

        function drawPolyline(points, color) {
            const path = points.map(p => ({ lat: p.latitude, lng: p.longitude }));
            const polyline = new google.maps.Polyline({
                path,
                geodesic: true,
                strokeColor: color,
                strokeOpacity: 0.8,
                strokeWeight: 5
            });
            polyline.setMap(map);
        }
    </script>
</body>
</html>
